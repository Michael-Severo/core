/**
 * @file ErrorCodes.js
 * @description Standardized error codes for the TSMIS application.
 */

export const ErrorCodes = Object.freeze({
  // --- Generic Core System Errors ---
  CORE: Object.freeze({
    UNKNOWN_ERROR: 'CORE_UNKNOWN_ERROR',
    INTERNAL_ERROR: 'CORE_INTERNAL_ERROR', // For unexpected internal issues
    INITIALIZATION_FAILED: 'CORE_INITIALIZATION_FAILED',
    ALREADY_INITIALIZED: 'CORE_ALREADY_INITIALIZED',
    NOT_INITIALIZED: 'CORE_NOT_INITIALIZED',
    SHUTDOWN_FAILED: 'CORE_SHUTDOWN_FAILED',
    VALIDATION_FAILED: 'CORE_VALIDATION_FAILED', // General validation failure
    INVALID_ARGUMENT: 'CORE_INVALID_ARGUMENT', // For invalid function/method arguments
    INVALID_OPERATION: 'CORE_INVALID_OPERATION', // Operation not allowed in current state
    INVALID_TYPE: 'CORE_INVALID_TYPE', // General type mismatch
    INVALID_HANDLER: 'CORE_INVALID_HANDLER', // Handler function is not valid
    INTEGRATION_FAILED: 'CORE_INTEGRATION_FAILED', // Generic failure with an external integration
    NOT_IMPLEMENTED: 'CORE_NOT_IMPLEMENTED', // Feature or method not implemented
    DEPRECATED: 'CORE_DEPRECATED', // Feature or method is deprecated
    RESOURCE_NOT_FOUND: 'CORE_RESOURCE_NOT_FOUND', // Generic resource not found
  }),

  // --- Configuration System Errors ---
  CONFIG: Object.freeze({
    LOAD_FAILED: 'CONFIG_LOAD_FAILED',
    SAVE_FAILED: 'CONFIG_SAVE_FAILED',
    VALIDATION_FAILED: 'CONFIG_VALIDATION_FAILED', // Specific to config validation
    MISSING_REQUIRED_FIELD: 'CONFIG_MISSING_REQUIRED_FIELD',
    INVALID_FIELD_TYPE: 'CONFIG_INVALID_FIELD_TYPE',
    INVALID_ENUM_VALUE: 'CONFIG_INVALID_ENUM_VALUE',
    PATTERN_MISMATCH: 'CONFIG_PATTERN_MISMATCH',
    INVALID_CONFIG_OBJECT: 'CONFIG_INVALID_CONFIG_OBJECT', // If config itself is not an object
    DUPLICATE_MANIFEST: 'CONFIG_DUPLICATE_MANIFEST', // Container specific
    DUPLICATE_COMPONENT: 'CONFIG_DUPLICATE_COMPONENT', // Container specific
    MISSING_DEPENDENCY: 'CONFIG_MISSING_DEPENDENCY', // Container specific: component dependency
    CIRCULAR_DEPENDENCY: 'CONFIG_CIRCULAR_DEPENDENCY', // Container specific
    MANIFEST_TYPE_NOT_FOUND: 'CONFIG_MANIFEST_TYPE_NOT_FOUND', // Container specific
  }),

  // --- Service & Component Errors (e.g., Container-managed services) ---
  SERVICE: Object.freeze({
    UNKNOWN_COMPONENT: 'SERVICE_UNKNOWN_COMPONENT', // Container specific
    COMPONENT_LOAD_FAILED: 'SERVICE_COMPONENT_LOAD_FAILED', // Container specific
    IMPLEMENTATION_LOAD_FAILED: 'SERVICE_IMPLEMENTATION_LOAD_FAILED', // Container specific
    DISCOVERY_FAILED: 'SERVICE_DISCOVERY_FAILED', // Container specific
    DIRECTORY_SCAN_FAILED: 'SERVICE_DIRECTORY_SCAN_FAILED', // Container specific
    OPERATION_FAILED: 'SERVICE_OPERATION_FAILED', // Generic service operation failure
    EXTERNAL_API_ERROR: 'SERVICE_EXTERNAL_API_ERROR',
    DATABASE_ERROR: 'SERVICE_DATABASE_ERROR',
    CACHE_ERROR: 'SERVICE_CACHE_ERROR',
    UNAVAILABLE: 'SERVICE_UNAVAILABLE', // Service is not available
  }),

  // --- Event System Errors ---
  EVENT: Object.freeze({
    INTERNAL_ERROR: 'EVENT_INTERNAL_ERROR',
    INITIALIZATION_FAILED: 'EVENT_INITIALIZATION_FAILED', // Specific to Event system
    ALREADY_INITIALIZED: 'EVENT_ALREADY_INITIALIZED', // Specific to Event system
    NOT_INITIALIZED: 'EVENT_NOT_INITIALIZED', // Specific to Event system
    SHUTDOWN_FAILED: 'EVENT_SHUTDOWN_FAILED', // Specific to Event system
    MISSING_DEPENDENCIES: 'EVENT_MISSING_DEPENDENCIES', // For EventBus/System deps
    INVALID_DEPENDENCY: 'EVENT_INVALID_DEPENDENCY', // For EventBus/System deps
    INVALID_EVENT_NAME: 'EVENT_INVALID_EVENT_NAME',
    INVALID_HANDLER: 'EVENT_INVALID_HANDLER', // Handler function validation
    INVALID_PATTERN: 'EVENT_INVALID_PATTERN', // Subscription pattern validation
    EMISSION_FAILED: 'EVENT_EMISSION_FAILED',
    SUBSCRIPTION_FAILED: 'EVENT_SUBSCRIPTION_FAILED',
    HANDLER_NOT_FOUND: 'EVENT_HANDLER_NOT_FOUND', // For unsubscribe if ID not found
    HANDLER_ERROR: 'EVENT_HANDLER_ERROR', // Error *thrown by* an event handler
    QUEUE_OPERATION_FAILED: 'EVENT_QUEUE_OPERATION_FAILED', // Generic queue add/remove issue
    QUEUE_PROCESSING_FAILED: 'EVENT_QUEUE_PROCESSING_FAILED', // Error during processQueue
    LEGACY_WILDCARD_FORWARD: 'EVENT_LEGACY_WILDCARD_FORWARD', // Specific internal diagnostic
  }),

  // --- Module System Errors ---
  MODULE: Object.freeze({
    INTERNAL_ERROR: 'MODULE_INTERNAL_ERROR', // CoreModule internal
    SYSTEM_ERROR: 'MODULE_SYSTEM_ERROR', // ModuleSystem internal
    INITIALIZATION_FAILED: 'MODULE_INITIALIZATION_FAILED', // Specific to Module system/instance
    ALREADY_INITIALIZED: 'MODULE_ALREADY_INITIALIZED', // Specific to Module system/instance
    NOT_INITIALIZED: 'MODULE_NOT_INITIALIZED', // Specific to Module system/instance
    SHUTDOWN_FAILED: 'MODULE_SHUTDOWN_FAILED', // Specific to Module system/instance
    MISSING_DEPENDENCIES: 'MODULE_MISSING_DEPENDENCIES', // For Module deps
    INVALID_DEPENDENCY: 'MODULE_INVALID_DEPENDENCY', // For Module deps
    DEPENDENCY_NOT_READY: 'MODULE_DEPENDENCY_NOT_READY',
    CONFIG_VALIDATION_FAILED: 'MODULE_CONFIG_VALIDATION_FAILED',
    INVALID_HEALTH_CHECK: 'MODULE_INVALID_HEALTH_CHECK',
    HEALTH_CHECK_FAILED: 'MODULE_HEALTH_CHECK_FAILED', // Error *executing* a health check
    UNHEALTHY: 'MODULE_UNHEALTHY', // Module reported unhealthy status
    OPERATION_FAILED: 'MODULE_OPERATION_FAILED', // Generic failure in a module's business logic
    DUPLICATE_MODULE: 'MODULE_DUPLICATE_MODULE', // ModuleSystem: registration
    REGISTRATION_FAILED: 'MODULE_REGISTRATION_FAILED', // ModuleSystem: registration
    UNREGISTER_FAILED: 'MODULE_UNREGISTER_FAILED', // ModuleSystem: unregistration
    NOT_FOUND: 'MODULE_NOT_FOUND', // ModuleSystem: resolve
    CIRCULAR_DEPENDENCY: 'MODULE_CIRCULAR_DEPENDENCY', // ModuleSystem: dependency order
  }),

  // --- Router System Errors ---
  ROUTER: Object.freeze({
    SYSTEM_INTERNAL_ERROR: 'ROUTER_SYSTEM_INTERNAL_ERROR', // RouterSystem internal
    INTERNAL_SYSTEM_ERROR: 'ROUTER_CORE_INTERNAL_ERROR', // CoreRouter internal (distinguish if needed)
    INITIALIZATION_FAILED: 'ROUTER_INITIALIZATION_FAILED', // Specific to Router system/instance
    ALREADY_INITIALIZED: 'ROUTER_ALREADY_INITIALIZED', // Specific to Router system/instance
    NOT_INITIALIZED: 'ROUTER_NOT_INITIALIZED', // Specific to Router system/instance
    SHUTDOWN_FAILED: 'ROUTER_SHUTDOWN_FAILED', // Specific to Router system/instance
    CREATION_FAILED: 'ROUTER_CREATION_FAILED', // For factory function issues
    MISSING_DEPENDENCIES: 'ROUTER_MISSING_DEPENDENCIES',
    INVALID_DEPENDENCY: 'ROUTER_INVALID_DEPENDENCY',
    INVALID_MODULE_ID: 'ROUTER_INVALID_MODULE_ID',
    INVALID_METHOD: 'ROUTER_INVALID_METHOD',
    INVALID_PATH: 'ROUTER_INVALID_PATH',
    INVALID_HANDLER: 'ROUTER_INVALID_HANDLER', // Handler function for a route
    INVALID_PAYLOAD: 'ROUTER_INVALID_PAYLOAD', // e.g. event payload missing data
    INVALID_API_VERSION: 'ROUTER_INVALID_API_VERSION',
    ROUTE_CONFLICT: 'ROUTER_ROUTE_CONFLICT',
    ROUTE_REGISTRATION_FAILED: 'ROUTER_ROUTE_REGISTRATION_FAILED',
    ROUTE_UNREGISTRATION_FAILED: 'ROUTER_ROUTE_UNREGISTRATION_FAILED',
    MODULE_UNREGISTRATION_FAILED: 'ROUTER_MODULE_UNREGISTRATION_FAILED',
    ROUTES_APPLICATION_FAILED: 'ROUTER_ROUTES_APPLICATION_FAILED',
    ADAPTER_NOT_FOUND: 'ROUTER_ADAPTER_NOT_FOUND',
    INVALID_ADAPTER: 'ROUTER_INVALID_ADAPTER',
    INVALID_ADAPTER_NAME: 'ROUTER_INVALID_ADAPTER_NAME',
    INVALID_MIDDLEWARE: 'ROUTER_INVALID_MIDDLEWARE',
    INVALID_MIDDLEWARE_NAME: 'ROUTER_INVALID_MIDDLEWARE_NAME',
    INVALID_HEALTH_CHECK: 'ROUTER_INVALID_HEALTH_CHECK', // If router system has own health checks
  }),

  // --- Specific Error Type Codes (used by respective Error classes) ---
  VALIDATION: Object.freeze({ // Used by ValidationError
    INVALID_INPUT: 'VALIDATION_INVALID_INPUT',
    SCHEMA_MISMATCH: 'VALIDATION_SCHEMA_MISMATCH', // More specific than CONFIG_VALIDATION_FAILED
    REQUIRED_FIELD: 'VALIDATION_REQUIRED_FIELD', // More specific than CONFIG_MISSING_REQUIRED_FIELD
    TYPE_ERROR: 'VALIDATION_TYPE_ERROR', // More specific than CONFIG_INVALID_FIELD_TYPE
    ENUM_MISMATCH: 'VALIDATION_ENUM_MISMATCH', // More specific than CONFIG_INVALID_ENUM_VALUE
    PATTERN_ERROR: 'VALIDATION_PATTERN_ERROR', // More specific than CONFIG_PATTERN_MISMATCH
    CUSTOM_VALIDATION_FAILED: 'VALIDATION_CUSTOM_VALIDATION_FAILED',
    // Codes from original ErrorSystem docs & errors/index.js [cite: 331] can be adapted here
    // SCHEMA: 'SCHEMA_VALIDATION_FAILED',
    // TYPE: 'INVALID_TYPE',
    // REQUIRED: 'REQUIRED_FIELD_MISSING',
    FAILED: 'VALIDATION_FAILED', // General catch-all for validation if not more specific
  }),

  NETWORK: Object.freeze({ // Used by NetworkError
    REQUEST_FAILED: 'NETWORK_REQUEST_FAILED',
    RESPONSE_ERROR: 'NETWORK_RESPONSE_ERROR', // Error parsing response or bad status code from remote
    TIMEOUT: 'NETWORK_TIMEOUT', // Or REQUEST_TIMEOUT
    CONNECTION_REFUSED: 'NETWORK_CONNECTION_REFUSED',
    HOST_UNREACHABLE: 'NETWORK_HOST_UNREACHABLE',
    DNS_LOOKUP_FAILED: 'NETWORK_DNS_LOOKUP_FAILED',
    SSL_ERROR: 'NETWORK_SSL_ERROR',
    ROUTE_NOT_FOUND: 'NETWORK_ROUTE_NOT_FOUND', // For 404s, distinct from ROUTER.ROUTE_NOT_FOUND (internal)
  }),

  AUTH: Object.freeze({ // Used by AuthError (Authentication)
    UNAUTHORIZED: 'AUTH_UNAUTHORIZED', // General, or for when reason is unknown
    INVALID_CREDENTIALS: 'AUTH_INVALID_CREDENTIALS',
    TOKEN_EXPIRED: 'AUTH_TOKEN_EXPIRED',
    TOKEN_INVALID: 'AUTH_TOKEN_INVALID', // Malformed, wrong signature etc.
    TOKEN_MISSING: 'AUTH_TOKEN_MISSING',
    ACCOUNT_LOCKED: 'AUTH_ACCOUNT_LOCKED',
    ACCOUNT_DISABLED: 'AUTH_ACCOUNT_DISABLED',
    MFA_REQUIRED: 'AUTH_MFA_REQUIRED',
    MFA_FAILED: 'AUTH_MFA_FAILED',
  }),

  ACCESS: Object.freeze({ // Used by AccessError (Authorization)
    FORBIDDEN: 'ACCESS_FORBIDDEN', // General access denied
    INSUFFICIENT_PERMISSIONS: 'ACCESS_INSUFFICIENT_PERMISSIONS',
    RESOURCE_OWNERSHIP_REQUIRED: 'ACCESS_RESOURCE_OWNERSHIP_REQUIRED',
    RATE_LIMIT_EXCEEDED: 'ACCESS_RATE_LIMIT_EXCEEDED',
    FEATURE_NOT_ENABLED: 'ACCESS_FEATURE_NOT_ENABLED', // For user/tenant
    // Codes from original ErrorSystem docs & errors/index.js
    // INSUFFICIENT_RIGHTS: 'INSUFFICIENT_RIGHTS', // Covered by INSUFFICIENT_PERMISSIONS
    // RESOURCE_ACCESS_DENIED: 'RESOURCE_ACCESS_DENIED', // Covered by FORBIDDEN
  }),
});